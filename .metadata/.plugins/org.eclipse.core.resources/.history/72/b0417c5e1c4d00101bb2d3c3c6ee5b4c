import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;
import java.util.List;
import javax.swing.SwingUtilities;

public class StudentManagementGUI extends JFrame {
    private JTextField sidField, snameField, sageField, saddField;
    private JTextArea outputArea;
    private StudentDAO dao;

    public StudentManagementGUI() {
        dao = new StudentDAO();
        setTitle("Student Management System");
        setSize(500, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        JTabbedPane tabbedPane = new JTabbedPane();

        // Panel for Add Student
        JPanel addPanel = new JPanel(new GridLayout(5, 2, 5, 5));
        sidField = new JTextField();
        snameField = new JTextField();
        sageField = new JTextField();
        saddField = new JTextField();
        JButton addBtn = new JButton("Add Student");
        addBtn.addActionListener(e -> insertStudent());
        addPanel.add(new JLabel("SID:"));
        addPanel.add(sidField);
        addPanel.add(new JLabel("Name:"));
        addPanel.add(snameField);
        addPanel.add(new JLabel("Age:"));
        addPanel.add(sageField);
        addPanel.add(new JLabel("Address:"));
        addPanel.add(saddField);
        addPanel.add(new JLabel());
        addPanel.add(addBtn);

        // Panel for View All Students
        JPanel viewPanel = new JPanel(new BorderLayout());
        outputArea = new JTextArea();
        JButton viewBtn = new JButton("View All Students");
        viewBtn.addActionListener(e -> viewStudents());
        viewPanel.add(viewBtn, BorderLayout.NORTH);
        viewPanel.add(new JScrollPane(outputArea), BorderLayout.CENTER);

        // Panel for Update Student
        JPanel updatePanel = new JPanel(new GridLayout(5, 2, 5, 5));
        JTextField usidField = new JTextField();
        JTextField unameField = new JTextField();
        JTextField uageField = new JTextField();
        JTextField uaddField = new JTextField();
        JButton updateBtn = new JButton("Update Student");
        updateBtn.addActionListener(e -> updateStudent(usidField, unameField, uageField, uaddField));
        updatePanel.add(new JLabel("SID to Update:"));
        updatePanel.add(usidField);
        updatePanel.add(new JLabel("New Name:"));
        updatePanel.add(unameField);
        updatePanel.add(new JLabel("New Age:"));
        updatePanel.add(uageField);
        updatePanel.add(new JLabel("New Address:"));
        updatePanel.add(uaddField);
        updatePanel.add(new JLabel());
        updatePanel.add(updateBtn);

        // Panel for Delete Student
        JPanel deletePanel = new JPanel(new GridLayout(2, 2, 5, 5));
        JTextField dsidField = new JTextField();
        JButton deleteBtn = new JButton("Delete Student");
        deleteBtn.addActionListener(e -> deleteStudent(dsidField));
        deletePanel.add(new JLabel("SID to Delete:"));
        deletePanel.add(dsidField);
        deletePanel.add(new JLabel());
        deletePanel.add(deleteBtn);

        // Add tabs
        tabbedPane.addTab("Add", addPanel);
        tabbedPane.addTab("View", viewPanel);
        tabbedPane.addTab("Update", updatePanel);
        tabbedPane.addTab("Delete", deletePanel);

        add(tabbedPane);
        setVisible(true);
    }

    private void insertStudent() {
        try {
            int sid = Integer.parseInt(sidField.getText());
            String name = snameField.getText();
            int age = Integer.parseInt(sageField.getText());
            String addr = saddField.getText();
            boolean inserted = dao.insertStudent(new Student(sid, name, age, addr));
            JOptionPane.showMessageDialog(this, inserted ? "Inserted!" : "Failed to insert!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }

    private void viewStudents() {
        try {
            List<Student> students = dao.getAllStudents();
            outputArea.setText("");
            for (Student s : students) {
                outputArea.append(s.getSid() + "\t" + s.getSname() + "\t" + s.getSage() + "\t" + s.getSadd() + "\n");
            }
        } catch (SQLException e) {
            outputArea.setText("Error: " + e.getMessage());
        }
    }

    private void updateStudent(JTextField sidF, JTextField nameF, JTextField ageF, JTextField addF) {
        try {
            int sid = Integer.parseInt(sidF.getText());
            String name = nameF.getText();
            int age = Integer.parseInt(ageF.getText());
            String addr = addF.getText();
            boolean updated = dao.updateStudent(new Student(sid, name, age, addr));
            JOptionPane.showMessageDialog(this, updated ? "Updated!" : "No student found!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }

    private void deleteStudent(JTextField sidF) {
        try {
            int sid = Integer.parseInt(sidF.getText());
            boolean deleted = dao.deleteStudent(sid);
            JOptionPane.showMessageDialog(this, deleted ? "Deleted!" : "No student found!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(StudentManagementGUI::new);
    }
}
