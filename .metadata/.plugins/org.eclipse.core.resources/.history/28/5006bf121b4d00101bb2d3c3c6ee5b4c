package gui;

import dao.StudentDAO;
import model.Student;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.List;

public class StudentManagementUI extends JFrame {
    private StudentDAO studentDAO = new StudentDAO();

    public StudentManagementUI() {
        setTitle("Student Management System");
        setSize(600, 400);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JTabbedPane tabbedPane = new JTabbedPane();

        tabbedPane.add("Add Student", createAddPanel());
        tabbedPane.add("View Students", createViewPanel());
        tabbedPane.add("Update Student", createUpdatePanel());
        tabbedPane.add("Delete Student", createDeletePanel());

        add(tabbedPane);
    }

    private JPanel createAddPanel() {
        JPanel panel = new JPanel(new GridLayout(5, 2));

        JTextField nameField = new JTextField();
        JTextField ageField = new JTextField();
        JTextField addressField = new JTextField();
        JButton addButton = new JButton("Add Student");

        panel.add(new JLabel("Name:"));
        panel.add(nameField);
        panel.add(new JLabel("Age:"));
        panel.add(ageField);
        panel.add(new JLabel("Address:"));
        panel.add(addressField);
        panel.add(new JLabel());
        panel.add(addButton);

        addButton.addActionListener(e -> {
            try {
                Student s = new Student();
                s.setSname(nameField.getText());
                s.setSage(Integer.parseInt(ageField.getText()));
                s.setSadd(addressField.getText());
                int result = studentDAO.insertStudent(s);
                JOptionPane.showMessageDialog(this, result + " student added");
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        return panel;
    }

    private JPanel createViewPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        JTable table = new JTable();
        JButton loadButton = new JButton("Load Students");

        panel.add(new JScrollPane(table), BorderLayout.CENTER);
        panel.add(loadButton, BorderLayout.SOUTH);

        loadButton.addActionListener(e -> {
            try {
                List<Student> students = studentDAO.getAllStudents();
                DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Name", "Age", "Address"}, 0);
                for (Student s : students) {
                    model.addRow(new Object[]{s.getSid(), s.getSname(), s.getSage(), s.getSadd()});
                }
                table.setModel(model);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        return panel;
    }

    private JPanel createUpdatePanel() {
        JPanel panel = new JPanel(new GridLayout(5, 2));

        JTextField idField = new JTextField();
        JTextField nameField = new JTextField();
        JTextField ageField = new JTextField();
        JTextField addressField = new JTextField();
        JButton updateButton = new JButton("Update Student");

        panel.add(new JLabel("ID:"));
        panel.add(idField);
        panel.add(new JLabel("New Name:"));
        panel.add(nameField);
        panel.add(new JLabel("New Age:"));
        panel.add(ageField);
        panel.add(new JLabel("New Address:"));
        panel.add(addressField);
        panel.add(new JLabel());
        panel.add(updateButton);

        updateButton.addActionListener(e -> {
            try {
                Student s = new Student();
                s.setSid(Integer.parseInt(idField.getText()));
                s.setSname(nameField.getText());
                s.setSage(Integer.parseInt(ageField.getText()));
                s.setSadd(addressField.getText());
                int result = studentDAO.updateStudent(s);
                JOptionPane.showMessageDialog(this, result + " student updated");
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        return panel;
    }

    private JPanel createDeletePanel() {
        JPanel panel = new JPanel(new GridLayout(2, 2));
        JTextField idField = new JTextField();
        JButton deleteButton = new JButton("Delete Student");

        panel.add(new JLabel("ID to Delete:"));
        panel.add(idField);
        panel.add(new JLabel());
        panel.add(deleteButton);

        deleteButton.addActionListener(e -> {
            try {
                int result = studentDAO.deleteStudent(Integer.parseInt(idField.getText()));
                JOptionPane.showMessageDialog(this, result + " student deleted");
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        return panel;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new StudentManagementUI().setVisible(true));
    }
}
